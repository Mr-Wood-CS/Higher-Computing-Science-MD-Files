{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Higher Computing Science","text":"<p>Christmas Programming Challenges Have Been Released \ud83c\udf85\ud83c\udf84\u26c4\u2744\ufe0f</p> <p>CSUK's Advent Coding Challenge 2024!</p> <p>Advent of Code 2024</p> Welcome to SQA Higher Computer Science! <p>The SQA National Higher Computer Science course is an exciting program that will help you develop essential skills and knowledge in the world of technology. The course is divided into three main units: Software Design and Development, Computer Systems, and Database Design and Development.</p> <p>In Software Design and Development, you'll learn how to design, write, and test programs, which will help you solve real-world problems through coding. This is where you start to think like a programmer and use logic to create solutions.</p> <p>The Computer Systems unit will help you understand how computers work, from the hardware components to the software they run. You\u2019ll explore the physical parts of a computer, such as the CPU and memory, as well as the different ways information is stored and processed.</p> <p>Finally, in Database Design and Development, you\u2019ll learn to design and manage databases, which are used everywhere to organize and retrieve information. This unit will give you the skills to handle data efficiently and understand how information is managed in real-world applications.</p> <p>Each unit will build your skills, preparing you for further study or careers in technology, software development, cybersecurity, and many other fields.</p>"},{"location":"CS/","title":"Computer Systems","text":""},{"location":"CS/01-Data-Rep/","title":"Data Representation","text":""},{"location":"DDD/","title":"Database Design and Development","text":""},{"location":"SDD/","title":"Software Design and Development","text":""},{"location":"SDD/1.0-Development-Methodologies/","title":"Development Methodologies","text":""},{"location":"SDD/1.0-Development-Methodologies/#what-is-a-development-methodology","title":"What is a Development Methodology?","text":"<p>A Development Methodology is how you systematically approach solving and creating a solution to a problem.  Human nature is to jump in and start working without thinking and planning which can often lead to problems and errors.</p> <p>When developing Computer Systems there needs to be a lot of planning as real world systems are of a huge size, are complex and have massive technological importance in all areas of our lives. For example:</p> <p> Databases could contain millions of customers and be vital to a multi-million pound business. <p> Website could have billions of users and need to do hundreds of thousand transactions a day.   <p> A Website could have billions of users and need to do hundreds of thousand transactions a day.  <p> Software programs can easily have multi-millions lines of code that can be responsible for many thousands of operations, even affecting life or death situations. <p>Due to the scale, cost, frequency of problems and long timescales involved in Software and Information System development there has to be a \u201cmethodical\u201d approach.  </p> <p>At this level of study you need to be able to describe and compare the following two: Iterative development process (waterfall method) Agile methodologies</p> <p>Info</p> <p>At this level of study you need to be able to describe and compare the following two:</p> <p><p> Iterative Development Process (waterfall method) <p><p>Agile Methodologies"},{"location":"SDD/1.0-Development-Methodologies/#iterative-development-process-waterfall-model","title":"Iterative Development Process (Waterfall Model)","text":"<p>The Waterfall model is a structured, linear approach to software development. In this methodology, the stages followed include analysis, design, implementation, testing, documentation, evaluation, and maintenance. Although the process is often referred to as iterative because stages can be revisited, one of its main challenges is that these stages are followed sequentially.</p> <p>As development progresses, new ideas and requirements will often emerge that were not foreseen during the initial planning stages. This leads to the need to revisit earlier phases of the project to address new issues and correct errors which slows the development process considerably. </p> <p>As a result, the Waterfall model is often criticized for being overly rigid, slow, and dependent on excessive documentation as each step strictly follows the last.</p>"},{"location":"SDD/1.0-Development-Methodologies/#agile-methodologies","title":"Agile Methodologies","text":"<p>Agile methodologies generally follow the same development stages (Analysis, Design, Implementation, Testing, Documentation, Evaluation, and Maintenance) but approach them more flexibly. The focus is on quickly getting started while allowing movement between stages as needed. This iterative process enables collaboration between different developer teams, allowing the project\u2019s requirements and solution to evolve step by step.</p> <p>The Agile methodology places a strong emphasis on teamwork, with regular interaction among developers and frequent engagement with clients or users to create prototypes. </p> <p>By showing working prototypes as the system develops, teams can gather real-time feedback, allowing for adjustments and improvements throughout the process. </p> <p>Info</p> <p><p> A key aspect of agile methodologies is their ability to respond to change, recognizing that requirements are often fluid and that software projects are inherently dynamic.) <p>Rapid Application Development (RAD) is one such example of an agile approach to software and information system creation. Its primary goal is to implement solutions quickly, minimizing upfront planning. RAD involves producing incremental versions or prototypes to refine requirements and address issues as they arise.</p> <p>While RAD can significantly reduce development time, it may lead to an overemphasis on the Graphical User Interface (GUI) rather than the core functionality of the software. Continuous iteration can also result in a disorganized process, increased errors, and long-term maintenance challenges. Therefore, RAD is best suited for smaller, dynamic projects like apps or websites, but is less ideal for large-scale or mission-critical systems.</p>"},{"location":"SDD/1.1-The-Iterative-Development-Process/","title":"The Iterative Development Process (Waterfall Model)","text":"<p>The Waterfall model is a structured, linear approach to software development. In this methodology, the stages followed include analysis, design, implementation, testing, documentation, evaluation, and maintenance. Although the process is often referred to as iterative because stages can be revisited, one of its main challenges is that these stages are followed sequentially.</p> <p>As development progresses, new ideas and requirements will often emerge that were not foreseen during the initial planning stages. This leads to the need to revisit earlier phases of the project to address new issues and correct errors which slows the development process considerably. </p> <p>As a result, the Waterfall model is often criticized for being overly rigid, slow, and dependent on excessive documentation as each step strictly follows the last.</p>"},{"location":"SDD/1.2-Agile-Methodologies/","title":"Agile Methodologies","text":"<p>Agile methodologies generally follow the same development stages (Analysis, Design, Implementation, Testing, Documentation, Evaluation, and Maintenance) but approach them more flexibly. The focus is on quickly getting started while allowing movement between stages as needed. This iterative process enables collaboration between different developer teams, allowing the project\u2019s requirements and solution to evolve step by step.</p> <p>The Agile methodology places a strong emphasis on teamwork, with regular interaction among developers and frequent engagement with clients or users to create prototypes. </p> <p>By showing working prototypes as the system develops, teams can gather real-time feedback, allowing for adjustments and improvements throughout the process. </p> <p>Key Point</p> <p>A key aspect of agile methodologies is their ability to respond to change, recognizing that requirements are often fluid and that software projects are inherently dynamic.</p> <p>Rapid Application Development (RAD) is one such example of an agile approach to software and information system creation. Its primary goal is to implement solutions quickly, minimizing upfront planning. RAD involves producing incremental versions or prototypes to refine requirements and address issues as they arise.</p> <p>While RAD can significantly reduce development time, it may lead to an overemphasis on the Graphical User Interface (GUI) rather than the core functionality of the software. Continuous iteration can also result in a disorganized process, increased errors, and long-term maintenance challenges. Therefore, RAD is best suited for smaller, dynamic projects like apps or websites, but is less ideal for large-scale or mission-critical systems.</p>"},{"location":"SDD/2.0-Analysis/","title":"Analysis","text":""},{"location":"SDD/2.1-Functional-Requirements/","title":"Functional Requirements (Inputs, Processes and Outputs) - <code>National 5 Computing Science</code>","text":"<p><code>Inputs</code> are what goes \u2018in\u2019 to the program - a common example would be anything the user is asked to type in.</p> <p><code>Processes</code> are the \u2018thinking\u2019 done by the program. It might be a calculation (adding to a score), checking something (has the player won yet?) or any other \u2018thinking\u2019 the program has to do.</p> <p><code>Outputs</code> are what goes \u2018out\u2019 of the program - for National 5, these are often  messages printed on the screen.</p> <p><code>Example 1:</code></p> <p>You\u2019ve been asked to write a program that asks for the name and age of everyone in the class. It then calculates the average, and displays that on the screen.</p> <ul> <li> <p>The inputs are the names and ages.</p> </li> <li> <p>The process is calculating the average.</p> </li> <li> <p>The output is the average that is displayed.</p> </li> </ul> <p><code>Example 2:</code></p> <p>You have been asked to write a program for a GPS car navigation system. The program asks the user for their destination. It connects to a satellite to get its current position. It calculates a route, and tells the user how long it expects the journey to take, as well as displaying the route on a map.</p> <ul> <li> <p>The inputs are the user\u2019s destination, and the satellite position.</p> </li> <li> <p>The process is calculating the route.</p> </li> <li> <p>The outputs are how long the journey should take and the displayed map.</p> </li> </ul>"},{"location":"SDD/2.2-Purpose/","title":"Purpose","text":"<p>The SQA define Purpose as a <code>general description</code> of the software. </p> <p>If asked for the purpose of a program, you should simply say what it does. </p> <p>For the rest of this section we will be using an <code>SQA example question</code> to demonstrate how to use <code>Purpose</code>, <code>Scope</code> and <code>Boundaries</code>.</p> <p>General Problem</p> <p>\"The purpose of this program is to take 20 pupil names, their prelim marks and their assignment marks from a file. </p> <p>Calculate the percentage, and then find and display the name and percentage of the pupil with the highest percentage.\"   </p> <p>For the purpose you are simply summarising what the program does, in your own words. </p> <p>How would you describe it to someone who didn\u2019t know what it was?</p> <p>For example, what\u2019s the purpose of Microsoft Word, Google Classroom, or Instagram? </p>"},{"location":"SDD/2.3-Scope/","title":"Scope","text":"<p>The scope is a list of the deliverables (things you need to produce) that the project will hand over to the client and/or end-user, e.g.: </p> <ul> <li> <p>Design documents</p> </li> <li> <p>Completed Program</p> </li> <li> <p>Test plan</p> </li> <li> <p>Test results</p> </li> <li> <p>Evaluation report</p> </li> </ul> <p>Note:</p> <p>Be careful of any specific requirements that might affect it, including the time limit if you\u2019re given one. </p> <p>In general, you are going to have to hand over things like the <code>detailed design</code>, <code>test plan</code>, <code>test results</code>, and the <code>completed program</code>.</p> <p>Using the <code>Pupil Grades</code> program, the scope would include: </p> <ul> <li> <p>Detailed design of the program </p> </li> <li> <p>Test plan and completed test table </p> </li> <li> <p>Working program </p> </li> <li> <p>Results of testing </p> </li> <li> <p>Evaluation report </p> </li> </ul> <p>Important</p> <p>You need to be careful with the word Scope. This is a different Scope to the one we use with variables. </p> <p>Do not get them mixed up!</p>"},{"location":"SDD/2.4-Boundaries/","title":"Boundaries","text":"<p>Boundaries are the limits of what the program does and does not do. </p> <p>It can include assumptions you\u2019ve made about what the program involves. </p> <p>In the example of the 20 pupil marks, we can make the following assumptions: </p> <ul> <li> <p>The file contains 20 pupil names, each with a prelim mark and an assignment mark.</p> </li> <li> <p>Unless told otherwise, assume the data is accurate, there is no reason to check it for validity.</p> </li> <li> <p>The top/highest mark is defined as the highest percentage.</p> </li> <li> <p>The requirements say it should output the name and percentage of the highest mark, it does not need to output every other pupil\u2019s mark, just calculate them. </p> </li> </ul> <p>Note:</p> <p>That last boundary is important in relation the course assignment as people often read too much into the task.</p> <p>The boundaries are about stopping, and thinking what it actually says. </p> <p>Does the project tell you to output each pupil\u2019s percentage? No - it only asks you to output the one with the highest mark. </p> <p>That might not be a very sensible program, but it\u2019s all you\u2019re being asked for - everything else is outside of the boundaries at this time. </p>"},{"location":"SDD/2.5-Example-Question/","title":"Example Question","text":"<p>The following analysis is from the 2020 higher coursework assignment. </p> <p>Pupils were given this page of information before having to answer a question.</p> <p>Task 2A:</p> <p>Teetastic Golf Club has a maximum of 50 members. It would like to develop a program to manage the information of existing and new members.</p> <p>Purpose</p> <p>When a new member visits the golf club, an administrator enters the member\u2019s first name, surname and category of membership into the program. During this process, the new member enters a password that is stored along with their details. The password is then validated to ensure that it meets password strength requirements.</p> <p>The program reads the existing member data from a text file and the new member\u2019s details are added to the existing member details. Details of all members are then displayed.  </p> <p>The program can find and display the number of members in each category (junior, adult or senior) and the total number of members. </p> <p>Functional requirements</p> <p><code>Inputs</code> </p> <ul> <li>New member first name, surname, category and password from keyboard</li> <li>Existing member first name, surname, category and password from file </li> </ul> <p><code>Processes</code></p> <ul> <li> <p>validate password </p> </li> <li> <p>store each member\u2019s details in appropriate data structures </p> </li> <li> <p>find the number of members in each category (junior, adult or senior) </p> </li> <li> <p>find the total number of members </p> </li> </ul> <p><code>Outputs</code></p> <ul> <li> <p>display name, surname and category of all members </p> </li> <li> <p>display the number of members in each category  </p> </li> <li> <p>display the total number of members </p> </li> <li> <p>There is no requirement to write data back to file.</p> </li> </ul> <p>Question</p> <p>Identify two boundaries for this program:</p>"},{"location":"SDD/3.0-Design-Explanation/","title":"Explanation","text":"<p>For Higher, you rarely need to produce the design yourself, although you may be asked to make refinements.</p> <p>You must be able to work with modular designs, using structure diagrams and pseudocode (flowcharts are not used at Higher), including data flow and a main algorithm/refinements where relevant. </p> <p>All of this is covered on the next few pages.</p>"},{"location":"SDD/3.1-Modular-Programming/","title":"Modular Programming","text":"<p>For Higher, your programs will be broken down into modules. These are smaller chunks of program that do a particular thing. </p> <p>The program has a main algorithm and lots of modules (also called sub-programs). Modules are generally self-contained. Data can be passed into them and back out, this is called the <code>data flow</code>.</p> <p>Each step in the algorithm is usually broken down into a module.</p> <p>Consider the following structure diagram for a program to find and display the most-downloaded song on an online streaming platform:</p> <p>image to be added</p> <p>The main steps of the algorithm are laid out and each step could be implemented as a module.</p> <p>Data from one step could flow in or out (<code>this is called the data flow</code>) and would be passed to the next module.</p> <p>Modular programming is useful because it allows different programmers to work on each module and further supports an agile approach to development as the task is broken down into smaller chunks that can be developed and tested independently before the modules are tested as a wwhole program.</p> <p>Note</p> <p>When we write modules, it\u2019s a good idea to use local variables due to a local variable being a variable that can only used inside one module and cant be changed by other parts of the program and thus, helps prevent mistakes.</p>"},{"location":"SDD/3.2-Main-Algorithm-and-Refinements/","title":"Main Algorithm and Refinements","text":"<p>The main algorithm is also known as the top-level design.</p> <p>The example on the previous page is the main algorithm, it shows the main steps of the program, but not the detail of how each step works.</p> <p>We could list the same algorithm as numbered lines of pseudocode. This is the main algorithm. </p> <pre><code>1.0 Read song data from text file\n\n2.0 Count number of downloads for each song\n\n3.0 Find song with most downloads\n\n4.0 Display song info\n</code></pre> <p>Important</p> <p>Write your main algorithm first when implementing, then you can fill in the details for each step.</p> <p>These details are known as refinements. </p> <p><code>Step 3</code> from the algorithm above tells us to find the song with the most downloads. </p> <p>We can assume that, by this point, we have an array of songs, telling us how many downloads each song has. </p> <p>We can refine step 3 to write detailed pseudocode that says how to do this:</p> <p><pre><code>3.1 Set most popular to first song in the list\n3.2 Loop for the number of songs\n3.3        If popularity of song is &gt; popularity of most popular\n3.4              Set most popular to current song\n3.5        End if\n3.6 End loop\n</code></pre> Don\u2019t worry too much about how the algorithm above works, the important thing is that it refines step 3 by adding the detail of how this module will work.</p> <p>Example Question</p> <p>Q1 - Read the main algorithm below</p> <p>Main Algorithm:</p> <p><pre><code>1.0 Load password data from file\n2.0 Ask user to enter a valid password\n3.0 Check if user password is in the file data\n4.0 Output whether password has been changed\n</code></pre> Step 2 could be refined further.</p> <p>Refine step 2 below.</p> <pre><code>2.1 Ask user to enter password\n2.2 While password is not valid \n2.3        Display error message\n2.4        Ask user to enter password again\n2.5 End while loop\n</code></pre>"},{"location":"SDD/3.3-Data-Flow-In-Out/","title":"Data Flow In / Out","text":"<p>When data is passed between modules, this is called the data flow.</p> <p>There are two ways of indicating data flow - either in a table, or as arrows on a structure diagram. The data flow design tells you (directly) which parameters you will need when implementing.</p> <p>The data flow can be variables or arrays. This data is passed in or passed out of a module.</p> <p>You can think of data flow like inputs and outputs from the analysis stage: what does each module need to know?</p> <p>The structure diagram on the previous page had four modules:</p> <ol> <li> <p>Read song data from text file</p> </li> <li> <p>Count number of downloads for each song</p> </li> <li> <p>Find song with most downloads [<code>the position of the most popular song in the list</code>]</p> </li> <li> <p>Display info of song with the most downloads</p> </li> </ol> <p>Data will have to be passed between these modules:</p> <ul> <li> <p>The song data will need to be passed from module 1 to module 2.</p> </li> <li> <p>How many times a song has been downloaded will need to go from module 2 to module 3</p> </li> <li> <p>Which song ID, and the details of all songs, will need to go to module 4 (<code>So that it can display the details matching the most popular song</code>)</p> </li> </ul> <p>We can note the data flow on the structure diagram:</p>"},{"location":"SDD/4.0-Software-Implementation/","title":"Software Implementation","text":""},{"location":"SI/","title":"Software Implementation","text":""},{"location":"SI/01-Sub-Program%20Procedures/","title":"Sub-program Procedures","text":""},{"location":"SI/01-Sub-Program%20Procedures/#modularity","title":"Modularity","text":"<p>Modularity means that when a program is written it is split up into smaller chunks called sub-programs. Imagine a program with millions of lines of. This would be split up into different programming teams to complete. </p> <p>Each of the sub-programs does a specific job. For example one sub-program may be to get user information. Each of the subprograms can be used in any order and can be reused multiple times. </p> <p>Example</p>"},{"location":"SI/01-Sub-Program%20Procedures/#procedures-in-python","title":"Procedures in Python","text":""},{"location":"SI/01-Sub-Program%20Procedures/#what-is-a-procedure","title":"What is a procedure?","text":"<p>We'll use an analogy here. Let's imagine that you're a dishwasher. Your process of washing a dish could be:</p> <ul> <li>Dip the dish into the water</li> <li>Cover every inch of the dish with soap </li> <li>Rinse and dry the dish</li> </ul> <p>So, every time you need to wash a dish, you do just that. Dip, soap, dry. Dip, soap, dry. Dip, soap, dry. Even when you go home, you dip, soap, dry. Dip, soap, dry. It's the same sequence, repeated over and over again. </p> <p>A procedure works the same way. People replace the process of dipping, soaping, and drying with the command \"wash the dishes\". When you call a procedure, it simply does the jobs that the procedure is supposed to do. </p> <p>By replacing a stack of instructions with one single statement, it makes code easier to read and debug. A procedure does not return a value.</p> <p>In Python we give a procedure a name, this is done by giving them a name after the, \u201cdef\u201d instruction. The brackets after the procedure name are used to pass in data that will be used in that block of code. This is known as parameter passing. </p> <p>Info</p> <p>A procedure literally just executes commands.</p>"},{"location":"SI/02-Scope-of-Variables-and-Parameter-Passing/","title":"Sub-program Procedures","text":"<ul> <li> Glazing-Company</li> </ul> <ul> <li> Glazing-Company</li> </ul>"},{"location":"SI/02-Scope-of-Variables-and-Parameter-Passing/#local-global-variables","title":"Local &amp; Global Variables","text":"<p>During National 5 you worked with variables throughout the entire scope of a program as well as accessing, using and changing their data values anywhere in the code, this is known as a Global Variable.</p> <p>A global variable is created in the main part of the program and can be passed/accessed by other parts of the program.</p> <p>A local variable however is only used within a single block of code and cannot be seen or accessed from other parts of the program.</p> <p>The scope of a variable defines which part of the program can see the variable and change its value. </p> <p>For example the scope of a local variable is the subroutine it is in.</p> <p>Example</p> <pre><code>    totalAppDownloads = 2305651\n\n    def downloadsForMonth():\n\n        print \"Current download amount: \", totalAppDownloads,\"downloads\"\n\n        monthDownloads = int(raw_input(\"How many downloads did the App have this month?  \"))\n\n        return monthDownloads\n\n    def newTotalDownloads(monthDownloads):\n\n        totalAppDownloads = totalAppDownloads + monthDownloads\n\n        return\n</code></pre>"},{"location":"SI/02-Scope-of-Variables-and-Parameter-Passing/#parameter-passing","title":"Parameter Passing","text":"<p>A parameter is a value that is being passed in or out of a subprogram.  In the example below you can see two parameters being passed into the calculate sub-program.  In all the software development we do we are going to follow the \u201cgood practice\u201d of using Local Variables within our sub-programs. This means we need to implement Parameter Passing to get the required data in and out of a module and so that it can used elsewhere in a program. In the example below you can see two parameters being passed into the calculate sub-program on line 6</p> <p>Example</p> <pre><code>def input_lunch_info():\n    lunch_cost = float(input(\"Enter the cost of lunch - \"))\n    years_member = int(input(\"Enter the years of membership - \"))\n    return lunch_cost, years_member\n\ndef calculate_final_cost (lunch_cost, years_member):\n    if lunch_cost &gt;= 55 or years_member &gt; 3:\n    print (\"\u00a3{:.2f}\".format(lunch_cost - 10)) \n    else:\n    print (\"\u00a3{:.2f}\".format(lunch_cost)) \n</code></pre>"},{"location":"SI/02-Scope-of-Variables-and-Parameter-Passing/#formal-parameters","title":"Formal Parameters","text":"<p>Formal parameters are placeholders within a subprogram for the values received from main program\u2019s actual parameters.  In the example below there is a \u2018validate\u2019 sub program. This has min, max and number as its parameters. The lines of code with the arrow pointing to it show different values are passed into the \u2018validate\u2019 sub program when it runs.  Within the validate sub-program the values that are passed in are known as min, max and number. This is why they are called placeholders for the values that are received from the main program.</p>"},{"location":"SI/02-Scope-of-Variables-and-Parameter-Passing/#actual-parameters","title":"Actual Parameters","text":"<p>This is the actual data sent to a subprogram. It's found in the line of code that you call the function. In the example below you can see checkAnswer(userAnswer). Within that, userAnswer would be the actual parameter.</p> <p>By replacing a stack of instructions with one single statement, it makes code easier to read and debug. A procedure does not return a value.</p> <p>In Python we give a procedure a name, this is done by giving them a name after the, \u201cdef\u201d instruction. The brackets after the procedure name are used to pass in data that will be used in that block of code. This is known as parameter passing. </p> <p>Info</p> <p>A procedure literally just executes commands.</p>"},{"location":"SI/03-Functions-%28Pre-defined%29/","title":"Sub-program Procedures","text":""},{"location":"SI/03-Functions-%28Pre-defined%29/#modularity","title":"Modularity","text":"<p>Modularity means that when a program is written it is split up into smaller chunks called sub-programs. Imagine a program with millions of lines of. This would be split up into different programming teams to complete. </p> <p>Each of the sub-programs does a specific job. For example one sub-program may be to get user information. Each of the subprograms can be used in any order and can be reused multiple times. </p> <p>Example</p>"},{"location":"SI/03-Functions-%28Pre-defined%29/#procedures-in-python","title":"Procedures in Python","text":""},{"location":"SI/03-Functions-%28Pre-defined%29/#what-is-a-procedure","title":"What is a procedure?","text":"<p>We'll use an analogy here. Let's imagine that you're a dishwasher. Your process of washing a dish could be:</p> <ul> <li>Dip the dish into the water</li> <li>Cover every inch of the dish with soap </li> <li>Rinse and dry the dish</li> </ul> <p>So, every time you need to wash a dish, you do just that. Dip, soap, dry. Dip, soap, dry. Dip, soap, dry. Even when you go home, you dip, soap, dry. Dip, soap, dry. It's the same sequence, repeated over and over again. </p> <p>A procedure works the same way. People replace the process of dipping, soaping, and drying with the command \"wash the dishes\". When you call a procedure, it simply does the jobs that the procedure is supposed to do. </p> <p>By replacing a stack of instructions with one single statement, it makes code easier to read and debug. A procedure does not return a value.</p> <p>In Python we give a procedure a name, this is done by giving them a name after the, \u201cdef\u201d instruction. The brackets after the procedure name are used to pass in data that will be used in that block of code. This is known as parameter passing. </p> <p>Info</p> <p>A procedure literally just executes commands.</p>"},{"location":"SI/04-Functions-%28Create-your-Own%29/","title":"Sub-program Procedures","text":""},{"location":"SI/04-Functions-%28Create-your-Own%29/#modularity","title":"Modularity","text":"<p>Modularity means that when a program is written it is split up into smaller chunks called sub-programs. Imagine a program with millions of lines of. This would be split up into different programming teams to complete. </p> <p>Each of the sub-programs does a specific job. For example one sub-program may be to get user information. Each of the subprograms can be used in any order and can be reused multiple times. </p> <p>Example</p>"},{"location":"SI/04-Functions-%28Create-your-Own%29/#procedures-in-python","title":"Procedures in Python","text":""},{"location":"SI/04-Functions-%28Create-your-Own%29/#what-is-a-procedure","title":"What is a procedure?","text":"<p>We'll use an analogy here. Let's imagine that you're a dishwasher. Your process of washing a dish could be:</p> <ul> <li>Dip the dish into the water</li> <li>Cover every inch of the dish with soap </li> <li>Rinse and dry the dish</li> </ul> <p>So, every time you need to wash a dish, you do just that. Dip, soap, dry. Dip, soap, dry. Dip, soap, dry. Even when you go home, you dip, soap, dry. Dip, soap, dry. It's the same sequence, repeated over and over again. </p> <p>A procedure works the same way. People replace the process of dipping, soaping, and drying with the command \"wash the dishes\". When you call a procedure, it simply does the jobs that the procedure is supposed to do. </p> <p>By replacing a stack of instructions with one single statement, it makes code easier to read and debug. A procedure does not return a value.</p> <p>In Python we give a procedure a name, this is done by giving them a name after the, \u201cdef\u201d instruction. The brackets after the procedure name are used to pass in data that will be used in that block of code. This is known as parameter passing. </p> <p>Info</p> <p>A procedure literally just executes commands.</p>"},{"location":"SI/05-Working-with-Files-%28txt%29/","title":"Working with Files","text":""},{"location":"SI/05-Working-with-Files-%28txt%29/#program-files","title":"Program Files","text":"<ul> <li> Glazing-Company</li> <li> Golf Championship</li> </ul>"},{"location":"SI/05-Working-with-Files-%28txt%29/#explanation","title":"Explanation","text":"<p>In this lesson, we will learn about file handling, which allows our programs to manage large amounts of data efficiently, similar to how real-world systems work.</p> <p>While it\u2019s useful to create lists, make changes, and add new data, if your program resets every time it runs and your changes are lost, it\u2019s not very practical. That\u2019s why it\u2019s sometimes necessary to save data outside the program, so it can be stored and any changes you make are saved.</p> <p>In real-world systems that handle huge amounts of data, such as millions of inputs, this data is usually provided to the program through a file. </p> <p>File handling is often called sequential file processing because the program reads the data in the same order it appears in the file, and writes it back in a similar sequence. This ensures that data is saved and retrieved in an organized and efficient way.</p> <p>The easiest way to start learning about saving and loading data is by using a text file. </p>"},{"location":"SI/05-Working-with-Files-%28txt%29/#options-modes","title":"Options (modes)","text":""},{"location":"SI/05-Working-with-Files-%28txt%29/#write-mode","title":"<code>Write Mode</code>","text":"<p>\"w\" (write Mode) creates a new file and writes to that file. If the file already exists, a new file will be created, overwriting the existing file.</p> <p>Example</p> <pre><code>    # Before using a file in a program, it must first be opened.\n    # To do this, link the file to an object by assigning it a reference name.\n    # The open function, written as open(\u201cfile name\u201d, \u201caccess type\u201d), locates the file. \n    file = open(\"School-Reg.txt\", \"w\")\n\n    # Use the file object\u2019s .write(string) method to insert string data into the file\n    # The string being written can either be a direct string or a string variable.\n    file.write(\"Name: Peter, Age: 17, Reg: R1 \\n\")\n    file.write(\"Name: Laura, Age: 17, Reg: R1 \\n\")\n</code></pre>"},{"location":"SI/05-Working-with-Files-%28txt%29/#read-mode","title":"<code>Read Mode</code>","text":"<p>\"r\" (Read Mode) opens for reading and will not allow you to make changes.</p> <p>Example</p> <pre><code>    # Open the School-Reg file in 'read mode'. \n    file = open(\"School-Reg.txt\", \"r\")\n\n    # Display the entire file.\n    print(file.read())\n\n    # Close files once the program has finished using it.\n    file.close()\n</code></pre> <p>Tip</p> <p>Note: you can also use file.readline() to read a file. Readline reads a single line of characters from the current position of the file and returns the data as a string. Readline however is not required at Higher</p>"},{"location":"SI/05-Working-with-Files-%28txt%29/#append-mode","title":"<code>Append Mode</code>","text":"<p>\"a\" (Append Mode) used to add new data to the end of the file.</p> <p>Example</p> <pre><code>    # Open the School-Reg file in 'append mode'\n    file = open(\"School-Reg.txt\", \"a\")\n\n    # Add another line to the file\n    file.write(\"Name: Karl, Age: 16, Reg: R1 \\n\")\n\n    # Close file once the program has finished using it. \n    # Note: if the file.close() line is not included, the changes will not be saved to the txt file.\n    file.close()\n</code></pre>"},{"location":"SI/06-Working-with-Files-%28csv%29/","title":"Working with .csv Files","text":"<ul> <li> Glazing-Company.py</li> </ul> <ul> <li> Glazing-Company.csv</li> </ul>"},{"location":"SI/06-Working-with-Files-%28csv%29/#explanation","title":"Explanation","text":"<p>CSV stands for Comma Separated Values and is a format usually associated with importing and exporting from spreadsheets and databases.</p> <p>It allows greater control over the data than a simple text file, as each row is split up into identifiable columns. </p> <p>Below is an example of how the data is stored:</p> Name Age Reg Number Peter 17 r1 Laura 16 r1 Marie 16 r1 <p>A .csv file would store the above data as:</p> <p><pre><code>    Peter, 17, r1\n    Laura, 17, r1\n    Marie, 16, r1\n</code></pre> It may be easier to think of the data as being separated into columns and rows that use an index to identify them:</p> Name Age Reg Number 0 Peter 17 r1 1 Laura 16 r1 2 Marie 16 r1"},{"location":"SI/06-Working-with-Files-%28csv%29/#options-modes","title":"Options (modes)","text":"<p>When opening a .csv file to use, you must first specify how that file will be used.</p> <p>The options are:</p>"},{"location":"SI/06-Working-with-Files-%28csv%29/#write-mode","title":"<code>Write Mode</code>","text":"<p>\"w\" (write Mode) creates a new file and writes to that file. If the file already exists, a new file will be created, overwriting the existing file.</p> <p>Example</p> <pre><code>    # This must be at the top of your program to allow Python to use the csv libary of commands.\n    import csv\n\n    # Create a new file called \"School-Reg.csv\", overwriting any previous files of the same name.\n    file = open(\"School-Reg.csv\", \"w\")\n\n    # Add 3 new records to the file\n    newRecord1 = (\"Peter,17,r1 \\n\")\n    newRecord2 = (\"Laura,17,r1 \\n\")\n    newRecord3 = (\"Marie,16,r1 \\n\")\n</code></pre>"},{"location":"SI/06-Working-with-Files-%28csv%29/#read-mode","title":"<code>Read Mode</code>","text":"<p>\"r\" (Read Mode) opens for reading and will not allow you to make changes.</p> <p>Example</p> <pre><code>    import csv\n\n    # Open \"School-Reg.csv\" in read mode.\n    file = open(\"School-Reg.csv\", \"r\")\n\n    # Display the records one row at a time.\n    for row in file:\n        print(row)\n\n    file.close()\n</code></pre>"},{"location":"SI/06-Working-with-Files-%28csv%29/#append-mode","title":"<code>Append Mode</code>","text":"<p>\"a\" (Append Mode) used to add new data to the end of the file.</p> <p>Example</p> <pre><code>    import csv\n\n    # Open \"School-Reg.csv\" in append mode.\n    file = open(\"School-Reg.csv\", \"a\")\n\n    # Ask user to enter name, age and reg\n    name = str(input(\"Enter Name: \"))\n    age = int(input(\"Enter Age: \"))\n    regNumber = str(input(\"Enter Reg: \"))\n</code></pre>"},{"location":"SI/07-Working-with-Records/","title":"Working with Records","text":""},{"location":"SI/07-Working-with-Records/#lesson-files","title":"Lesson Files","text":"<ul> <li> Cat Records</li> </ul> <ul> <li> Address Book</li> </ul> <p>What you need to know</p> <p>You must be able to describe, exemplify and implement records </p>"},{"location":"SI/07-Working-with-Records/#explanation","title":"Explanation","text":"<p>So far, we\u2019ve used only one type of data structure to store multiple values: the array. </p> <p>Remember, an array is like a list of related variables that all share the same data type. For example, an array could store a list of numbers or a list of names, but not both.</p> <p>While arrays can only hold one type of data, records allow us to store different types of data together in a single structure. For example, one record can store a name (string), an age (integer), and a status (Boolean) all in one place.</p> <p>Just like in a database, records help us organize related information more efficiently.</p> <p>By using records, we can keep all related data about a single person or object together in one structure, and we can use real-world names for each category (called fields) to make the data easier to understand and manage. </p> <p>This is especially useful because most systems we work with, like databases, organize data in this way.</p>"},{"location":"SI/07-Working-with-Records/#record-structures","title":"Record Structures","text":"<p>A record structure is like creating your own custom data type. </p> <p>As a programmer, you define a record with a name that represents something real, like \"Student\" or \"Product\" and specify different categories (fields) for storing information. </p> <p>Each field has a name and a specific data type (e.g., string, integer, Boolean), so the program knows how to store and handle each piece of data. </p> <p>This way, when the program creates actual records, it knows exactly what kind of information to expect in each field.</p>"},{"location":"SI/07-Working-with-Records/#creating-a-single-record-structure","title":"Creating a Single Record Structure","text":""},{"location":"SI/07-Working-with-Records/#part-one","title":"Part One","text":"PythonExplanation <pre><code>from dataclasses import dataclass\n\n@dataclass\n</code></pre> <p>Line 1 - from dataclasses import Dataclass This line is like getting a special helper from a toolbox. It brings in something called dataclass, which makes it easier to create a class that stores information.</p> <p>Line 3 - @dataclass This is a special tag that tells Python, \"I want to make the next class a dataclass.\" This means Python will automatically help us with things like creating the class and keeping track of data inside it.</p>"},{"location":"SI/07-Working-with-Records/#part-two","title":"Part Two","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n</code></pre> <p>Line 5 - class SchoolReg Here, we are creating a class called SchoolReg. A class is like a blueprint or recipe. In this case, it helps us create something to store information about a school registration, like a student's name, age, and registration number.</p> <p>Line 6 - Name: str = \"\" Inside the class, we create a variable called Name. This will hold the student's name, and it's a string, which means it's a word or group of letters (like \"Peter\"). The empty quotes \" \" mean that we are starting with no name yet.</p> <p>Line 7 - Age: int = 0 This is another variable called Age. It will hold the student's age, and it's an integer (which means a whole number like 17). Right now, we start it at 0.</p> <p>Line 8 - Reg: str = \"\" This variable is called Reg, which stands for \"registration number.\" It\u2019s also a string (a group of letters or numbers). At first, it's an empty string \"\", but we will fill it in later.</p>"},{"location":"SI/07-Working-with-Records/#part-three","title":"Part Three","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = SchoolReg()\n    pupilRecord.Name = \"Peter\"\n    pupilRecord.Age = 17\n    pupilRecord.Reg = \"r1\"\n</code></pre> <p>Line 10 -  pupilRecord = SchoolReg() Now we create an object called pupilRecord from the SchoolReg class. Think of the class as a cookie cutter, and this object is a cookie made from it. This object will store a student's name, age, and registration number.</p> <p>Line 11 - pupilRecord.Name = \"Peter\" Here, we set the Name of the pupilRecord object to \"Peter\". Before it was empty (\"\"), but now it's filled with the name \"Peter\".</p> <p>Line 12 - pupilRecord.Age = 17 Next, we set the Age for pupilRecord to 17. Before, it was 0, but now we know Peter is 17 years old.</p> <p>__Line 13 - pupilRecord.Reg = \"r1\"_ Here, we set the registration number (Reg) to \"r1\". Now, the student Peter has a registration number \"r1\".</p>"},{"location":"SI/07-Working-with-Records/#part-four","title":"Part Four","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = SchoolReg()\n    pupilRecord.Name = \"Peter\"\n    pupilRecord.Age = 17\n    pupilRecord.Reg = \"r1\"\n\n    print (pupilRecord.Name) \n    print (pupilRecord.Age) \n    print (pupilRecord.Reg) \n</code></pre> <p>Line 15 - print(pupilRecord.Name) This line tells the computer to print (show) the name of the student, which is \"Peter\". The computer will display \"Peter\" on the screen.</p> <p>Line 16 - print(pupilRecord.Age) This prints the student's age, which is 17. The computer will show 17 on the screen.</p> <p>Line 17 - print(pupilRecord.Reg) Finally, this prints the student's registration number, which is \"r1\". The computer will show \"r1\".</p>"},{"location":"SI/08-Standard-Algorithms-Linear-Search/","title":"Linear Searching","text":"<ul> <li> Linear-Number-Search.py</li> </ul> <p>What you need to know</p> <p>You must be able to describe, exemplify and implement arrays of records </p>"},{"location":"SI/08-Standard-Algorithms-Linear-Search/#explanation","title":"Explanation","text":"<p>You learned three standard algorithms for National 5:</p> <ul> <li>Input validation</li> <li>Running total in a loop</li> <li>Traversing an array (simply, looping through each item in the array, one at a time)</li> </ul> <p>For Higher, we add three more standard algorithms:</p> <ul> <li>Linear search</li> <li>Count occurrences</li> <li>Find minimum/maximum</li> </ul> <p>All of the above require you to be able to traverse an array.</p> <p>For each algorithm, you must be able to:</p> <ul> <li>Write it in pseudocode</li> <li>Write a memorised example in program code, then:</li> <li>Write it in the context of a question you\u2019re given, in the exam or assignment</li> </ul> <p>The first step is to learn/memorise the algorithms; then, you can apply them to unfamiliar contexts.</p>"},{"location":"SI/08-Standard-Algorithms-Linear-Search/#linear-search","title":"Linear Search","text":"<p>A linear search is used with one or more arrays of items. We traverse (loop through) the array, looking for a particular value. </p> <p>If one of the items in the array matches the search value, we do something. There are two variations of the algorithm: one simply records if something is found; the other records where in the list it is found. </p> <p>It should be clear from a question which one you\u2019re expected to use.</p> <p>The example below asks for a target (search term the user is looking for). </p> <ul> <li>It loops through 10 names. </li> <li>If each name matches the target, it switches the \u2018found\u2019 variable to true. </li> <li>At the end of the program, we could know if the name was in the list by checking the value of the found variable.</li> </ul> Algorithm ExampleSQA-style Marking Scheme for a Linear Search (4 marks) <pre><code>Set found to false\n\nInput target\n\nFor counter from 0 to 9\n\n        If names(counter) == target then\n\n        Set found to true\n\n    End if\n\nEnd for loop\n</code></pre> <ul> <li> <p>Initialise the variable (1 mark)</p> </li> <li> <p>Loop through the elements of the array (1 mark)</p> </li> <li> <p>Check if the element matches target (1 mark)</p> </li> <li> <p>Set variable to true (1 mark)</p> </li> </ul> <p>The final mark in the example (setting the variable to true) might be replaced with something else, depending on the question. </p> <p>For example, you might be asked to find the position of the element.</p>"},{"location":"SI/08-Standard-Algorithms-Linear-Search/#example-1-using-found","title":"Example 1 - Using Found","text":"PythonExplanation <pre><code>    # An array of seven names\n    names = [\"Dopey\", \"Grumpy\", \"Doc\", \"Bashful\", \"Sneezy\", \"Sleepy\", \"Happy\"]\n\n    target = input(\"Enter a name to look for\")\n    found = False\n\n    # Loop through each item\n    for counter in range(0,7):\n      # Check each item against the target\n      if names[counter] == target:\n        found = True\n\n    # Is the target in the list?\n    print(\"Item was found:\", found)\n</code></pre> <p>This program contains a list of names. It asks the user to enter a search target. Then it searches the list of names to see if any of them match the target. </p> <p>If they do, it confirms that the target was found.</p> <p>At the end of the program, the console should show a message confirming whether the target was in the list.</p>"},{"location":"SI/08-Standard-Algorithms-Linear-Search/#example-2-using-posistion","title":"Example 2 - Using Posistion","text":"PythonExplanation <pre><code>    # An array of seven names\n    names = [\"Dopey\", \"Grumpy\", \"Doc\", \"Bashful\", \"Sneezy\", \"Sleepy\", \"Happy\"]\n\n    target = input(\"Enter a name to look for\")\n    position = -1\n\n    # Loop through each item\n    for counter in range(0,7):\n      # Check each item against the target\n      if names[counter] == target:\n        position = counter\n\n    # Is the target in the list?\n    print(\"Item was found at position:\", position)\n</code></pre> <p>Sometimes, we want to know the position of an element in the array - for instance, the target was found at position 5. This example uses the same basic program as the one above, but instead of reporting whether the name is found, it reports its position.</p> <p>We set the starting position to -1. This is because it isn\u2019t possible to be at position -1 in the array. That way, we know that anything other than -1 must mean the item was found, so the position was changed.</p> <p>If, at the end of the program, the value of position was still -1, we would know that the target hadn\u2019t been found.</p>"},{"location":"SI/08-Standard-Algorithms-Linear-Search/#example-3-using-posistion-with-parallel-arrays","title":"Example 3 - Using Posistion with Parallel Arrays","text":"PythonExplanation <pre><code># An array of pupil names, and a *parallel* array of marks\npupils = [\"Bob\", \"Bart\", \"Krusty\", \"Mel\", \"Lisa\"]\nmarks = [10, 2, 1, 8, 9]\n\n# Ask for a person's name, and print their mark\ntarget_name = input(\"Please enter a name:\")\nposition = -1\n\n# Loop through names\nfor counter in range(0, 5):\n  if pupils[counter] == target_name:\n    position = counter\n\n# If we found their name at [position], their mark must also be there\ntheir_mark = marks[position]\n</code></pre> <p>This program has two arrays: one of pupil names, and one of marks. </p> <p>Both arrays have the same number of elements. </p> <p>Looking at a name, we can find their mark by going to the corresponding element in the marks array (so the third name corresponds to the third mark). </p> <p>The program asks for a target name. </p> <p>It loops through the first array, and finds the position where that name is in the list. Later, we can find the corresponding mark, because if the name was found at pupils[position], their mark must be stored at marks[position].</p>"},{"location":"SI/09-Standard-Algorithms-Count-Occurrences/","title":"Count Occurrences","text":"<p>What you need to know</p> <p>You must be able to describe, exemplify and implement arrays of records </p>"},{"location":"SI/09-Standard-Algorithms-Count-Occurrences/#explanation","title":"Explanation","text":"<p>Count occurrences are very similar to linear search:</p> <ul> <li> <p>The user enters a target/search-term.</p> </li> <li> <p>The algorithm then searches the array. </p> </li> <li> <p>If the target is found, instead of recording position, it adds +1 to a total/counter. </p> </li> </ul> <p>By doing this, it counts how often a particular condition is met.</p> <p>It could also be used to check for an exact match - for example, in a list of names, how many people are called Bob?</p> <p>However, we could also use it with other conditions:</p> <ul> <li> <p>In a list of percentages, how many are above 75%?</p> </li> <li> <p>In a list of integers, how many are even?</p> </li> <li> <p>In a list of letters, how many are upper-case?</p> </li> </ul> <p>Important</p> <ul> <li> <p>Do not confuse counting occurrences with keeping a running total: one counts how many of something there are, the other adds them all together.  </p> </li> <li> <p>There might be times when you are asked to do both on the same question.</p> </li> <li> <p>Do not confuse \u2018count\u2019 or \u2018counter\u2019 with the loop counter. </p> </li> <li> <p>Your loop counter (e.g. for counter in range...) might use a similar name, e.g. you call one count and the other counter. </p> </li> <li> <p>You could call your loop counter something like \u201cfor index in range(0,9)\u201d  to make sure you don\u2019t get confused.</p> </li> </ul> <p>The example below  asks the user to enter a target. It loops through a list of ten names. It checks if each element matches the target. If so, it adds 1 to the count. At the end, it displays how many were found.</p> Algorithm ExampleSQA-style Marking Scheme for a Linear Search (4 marks) <pre><code>   Set count to 0\n\n   Input target\n\n   For index from 0 to 9\n\n    If names(index) == target then\n\n        Set count to count + 1\n\n    End if\n\n   End for loop\n\n   Display count\n</code></pre> <ul> <li> <p>Initialise the count variable  (1 mark)</p> </li> <li> <p>Loop through the elements of the array (1 mark)</p> </li> <li> <p>Check if the element matches target (1 mark)</p> </li> <li> <p>Add 1 to the count variable (1 mark)</p> </li> </ul> <p>The final mark in the example (setting the variable to true) might be replaced with something else, depending on the question. </p> <p>For example, you might be asked to find the position of the element.</p>"},{"location":"SI/09-Standard-Algorithms-Count-Occurrences/#example-1-using-sign","title":"Example 1 - Using == Sign","text":"PythonExplanation <pre><code>    # A list of cars spotted on a road, recorded by make\n    cars = [\"Ford\", \"Ford\", \"Toyota\", \"Volkswagen\", \"Kia\", \"Nissan\", \"Honda\"]\n\n    # Ask the user to enter a target\n    make = input(\"Please enter a make:\")\n    count = 0\n\n    for index in range(0, 7):\n      if cars[index] == make:\n        count = count + 1\n\n    # Display how many\n    print(\"There were\", count, \"matching cars\")\n</code></pre> <p>This program contains data for cars spotted going down a road at a particular time. </p> <p>The programmer wants to be able to find how many Fords, Nissans or Hondas were recorded.</p> <p>The user enters a make.</p> <p>The program then searches through the list of cars, and if the make matches, it adds 1 to the counter.</p> <p>At the end of the program, it shows how many of that make were found.</p>"},{"location":"SI/09-Standard-Algorithms-Count-Occurrences/#example-2-using-sign","title":"Example 2 - Using &gt;= Sign","text":"PythonExplanation <pre><code>    # A list of percentages\n    percentages = [99.7, 100.0, 52.6, 13.9, 15.2, 88.1, 64.7, 22.5, 71.8]\n\n    # How many are at least 50%?\n    target = 50.0\n    count = 0\n\n    for index in range(0, 9):\n      if percentages[index] &gt;= target:\n        count = count + 1\n\n    # Show results\n    print(\"There were\", count, \"values of 50% or more\")\n</code></pre> <p>This program contains data for cars spotted going down a road at a particular time. </p> <p>The program sets a target of 50.0, and counts how many of the percentages are greater than or equal to the target.</p>"},{"location":"SI/09-Standard-Algorithms-Count-Occurrences/#example-3-odd-or-even","title":"Example 3 - Odd or Even","text":"PythonExplanation <pre><code>    # A list of integers\n    numbers = [99, 44, 55, 12, 19, 72, 60, 54, 13, 18, 2, 75]\n\n    # Are these odd or even?\n    odd_count = 0\n    even_count = 0\n\n    for index in range(0, 12):\n      if (numbers[index] % 2) == 0:\n        even_count = even_count + 1\n      else:\n        odd_count = odd_count + 1\n\n    print(\"There were\", even_count, \"even numbers\")\n    print(\"and\", odd_count, \"odd numbers in the list\")\n</code></pre> <p>This program has a list of numbers, and counts how many are odd and how many are even, using two counters:</p>"},{"location":"SI/10-Standard-Algorithms-Finding-Minimum-and-Maximum/","title":"Finding Minimum and Maximum","text":"<p>What you need to know</p> <p>You must be able to describe, exemplify and implement arrays of records </p>"},{"location":"SI/10-Standard-Algorithms-Finding-Minimum-and-Maximum/#explanation","title":"Explanation","text":"<p>The find minimum (find-min) and find maximum (find-max) algorithms are very similar, only differing in whether they use the &lt; or &gt; sign. </p> <p>These algorithms would only work on arrays of integers or real numbers (you can\u2019t find the \u201cmaximum name\u201d from an array of strings).</p> <p>For example, below is an array of 10 integers:</p> <p>To find the maximum (highest) value, we would look through the list one-by-one:</p> <ul> <li> <p>The first value is 33. We don\u2019t yet know any other values, so 33 must be the highest we\u2019ve found.</p> </li> <li> <p>The next value is 12. That is less than 33, so we ignore it (it isn\u2019t higher).</p> </li> <li> <p>The next value is 46. This is higher than 33 (the highest we\u2019ve found so far), so becomes the new highest.</p> </li> <li> <p>The next value is 18. This is lower than 46 (the current highest found), so we ignore it\u2026</p> </li> </ul> <p>On that basis, we would find that 49 (element 6) is the highest value in the array.</p> Find Maximum AlgorithmFind Minimum Algorithm <pre><code>Declare a maximum variable, and set it to the first item in the array (e.g. 33)\n\nLoop for each element in the array\n\n    If number(counter) &gt; maximum\n\n        Set maximum to number(counter)\n\n    End if\n\nEnd for loop\n</code></pre> <pre><code>Declare a minimum variable, and set it to the first item in the array (e.g. 33)\n\nLoop for each element in the array\n\n    If number(counter) &lt; maximum\n\n        Set minimum to number(counter)\n\n    End if\n\nEnd for loop\n</code></pre>"},{"location":"SI/11-Parallel-1D-Arrays/","title":"Parrllel 1D Arrays","text":"<p>What you need to Know</p> <p>You must be able to describe, exemplify and implement parallel 1D arrays.</p>"},{"location":"SI/11-Parallel-1D-Arrays/#explanation","title":"Explanation","text":"<p>You already know that an array is a list of related values, called elements, that can be referred to by number, e.g. temperature[0], temperature[5] etc. </p> <p>This example below now adds a second array that records the date on which the temperature was taken.</p> <p>We can look up the temperature on the 8th of June, by looking for that date, and reading the corresponding temperature (14\u00b0). </p> <p>These are parallel arrays, because we can look up corresponding values, like a table.</p> <p>In this example, pupil marks are stored in one array, and pupil names are stored in another. </p> <p>We can see that Jack scored 23, and Lucy scored 24, by looking at the two arrays side-by-side, as if they were a table.</p> <p>There is no special syntax or different way to write these.</p> <p>We just declare two arrays.</p> <p>Example</p> <pre><code>          # Two *parallel* arrays of pupil names and marks\n          pupil_name = [\"Peter\", \"Laura\", \"Marie\"]\n          pupil_mark = [20, 21, 23]\n\n          # If we want to find the name and mark of the third pupil in the list, we would say:\n          print(pupil_name[2])\n          print(pupil_mark[2])\n</code></pre>"},{"location":"SI/11-Parallel-1D-Arrays/#working-with-files","title":"Working with Files","text":"<p>This example is based on the Schools-Reg.csv file from earlier</p> <p>We would implement this program with three parallel arrays - one for name, age and reg group.</p> <p>This program reads the Schools.csv file, and produces an array of lines - each line of the file. </p> <p>We then split each line into parts (comma separated values), e.g.:</p> <p>Example</p> <pre><code>    import csv\n\n    # Open the file for reading\n    file = open(\"School-Reg.csv\", \"r\")\n\n    # Assign Parallel arrays for school reg data\n    name = [str] * 3\n    age = [int] * 3\n    regGroup = [str] * 3\n\n    # Loop through the array of lines\n    for line in range(0, 3):\n        data = file.readline()\n        # Strip characters that are not required\n        data = data.strip(\"\\n\")\n        # Split the data on the comma\n        data = data.split(\",\")\n\n       # Store the 'data' in the parallel arrays\n        name[line] = data[0]\n        age[line] = data[1]\n        regGroup[line] = data[2]\n\n    # Display the arrays\n    for i in range (0,3):\n      print(\"Name: \" + name[i] + \" Age: \" + str(age[i]) + \" Reg: \" + regGroup[i])\n\n    # Close the file\n    file.close()\n</code></pre>"},{"location":"SI/12-Arrays-of-Records/","title":"Arrays of Records","text":"<p>What you need to know</p> <p>You must be able to describe, exemplify and implement arrays of records </p>"},{"location":"SI/12-Arrays-of-Records/#explanation","title":"Explanation","text":"<p>In Python, an array of records is like a list of boxes, where each box holds important information about a person, place, or thing. </p> <p>Each \"box\" (record) has labelled parts for details, like a name, age, or ID number. </p> <p>For example, if we have three students, we can store their name, age, and registration number in three separate boxes.</p> <p>These boxes are part of a record, and we can easily look inside each one to see or change the details. </p>"},{"location":"SI/12-Arrays-of-Records/#array-of-records-in-python-basic-method","title":"Array of Records in Python (basic method)","text":""},{"location":"SI/12-Arrays-of-Records/#part-one","title":"Part One","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n</code></pre> <p>Info</p> <p>Lines 1 - 8 are covered in Working with Records.</p> <p>Line 10 - pupilRecord = [SchoolReg() for x in range(0,3)] This line creates a list called pupilRecord. A list is like a box where we can store many things. In this case, we are creating two empty student records because the range (0,3) means it will create three spots, one for pupilRecord[0], one for pupilRecord[1] and one for pupilRecord[2].</p> <p>In short, this line says:</p> <p>\"Make 3 empty student records using the SchoolReg class.\"</p>"},{"location":"SI/12-Arrays-of-Records/#part-two","title":"Part Two","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    pupilRecord[0].Name = \"Peter\"\n    pupilRecord[0].Age = 17\n    pupilRecord[0].Reg = \"r1\"\n</code></pre> <p>Line 12 - pupilRecord[0].Name = \"Peter\" Here, we set the Name of the first student (pupilRecord[0]) to \"Peter\". Before, it was empty, but now it holds the name \"Peter.\"</p> <p>Line 13 - pupilRecord[0].Age = 17 Next, we set the Age of the first student (pupilRecord[0]) to 17. Before it was 0, and now it\u2019s set to 17 years old.</p> <p>Line 14 - pupilRecord[0].Reg = \"r1\" Here, we set the registration number (Reg) for the first student to \"r1\". Now Peter has the registration number \"r1\".</p>"},{"location":"SI/12-Arrays-of-Records/#part-three","title":"Part Three","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    pupilRecord[0].Name = \"Peter\"\n    pupilRecord[0].Age = 17\n    pupilRecord[0].Reg = \"r1\"\n\n    print (pupilRecord[0].Name) \n    print (pupilRecord[0].Age) \n    print (pupilRecord[0].Reg) \n</code></pre> <p>Line 16 - print(pupilRecord[0].Name) This line tells the computer to print the name of the first student in the list, which is Peter.</p> <p>Line 17 - print(pupilRecord[0].Age) This prints the age of the first student in the list, which is 17. </p> <p>Line 18 - print(pupilRecord[0].Reg) Finally, this prints the registration number of the first student, which is \"r1\".</p>"},{"location":"SI/12-Arrays-of-Records/#array-of-records-efficient-method","title":"Array of Records (efficient method)","text":""},{"location":"SI/12-Arrays-of-Records/#part-one_1","title":"Part One","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    for x in range(len(pupilRecord)):\n       pupilRecord[x].Name = str(input(\"Enter Name: \"))\n       pupilRecord[x].Age = int(input(\"Enter Age: \"))\n       pupilRecord[x].Reg = str(input(\"Enter Reg: \"))\n\n    for x in range(len(pupilRecord)):\n        print (\"Name: \" , pupilRecord[x].Name , \"Age: \" , pupilRecord[x].Age , \"Reg: \" , pupilRecord[x].Reg )\n</code></pre> <p>Info</p> <p>Lines 1 - 8 are covered in Working with Records.</p> <p>Line 12 - for x in range(len(pupilRecord)): The range(len(pupilRecord)) makes the loop go through each student one at a time (three students in this case).</p> <p>Line 13 - pupilRecord[x].Name = str(input(\"Enter Name: \")) This line asks the user to type a name for each student using the input() function. Whatever the user types in is stored in the Name variable for each student in the list. For example, the first time the loop runs, it asks for the name of pupilRecord[0].</p> <p>Line 14 - pupilRecord[x].Age = int(input(\"Enter Age: \")) This line asks the user to type the student's age. The input() function is used again, and the number typed is stored as the student's age. It\u2019s converted into an integer (whole number). For example, the first time, it will store the age for pupilRecord[0].</p> <p>Line 15 - pupilRecord[x].Reg = str(input(\"Enter Reg: \")) This line asks the user to type the student's registration number. The registration number is stored as a string (letters and numbers) for each student. For example, the first time, it stores the registration number for pupilRecord[0].</p>"},{"location":"SI/12-Arrays-of-Records/#part-two_1","title":"Part Two","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    for x in range(len(pupilRecord)):\n       pupilRecord[x].Name = str(input(\"Enter Name: \"))\n       pupilRecord[x].Age = int(input(\"Enter Age: \"))\n       pupilRecord[x].Reg = str(input(\"Enter Reg: \"))\n\n    for x in range(len(pupilRecord)):\n        print (\"Name: \" , pupilRecord[x].Name , \"Age: \" , pupilRecord[x].Age , \"Reg: \" , pupilRecord[x].Reg )\n</code></pre> <p>Line 17 - pupilRecord = [SchoolReg() for x in range(0,3)] This is another loop that goes through each student record in the pupilRecord list only this time it\u2019s going to print the details of every student one at a time.</p> <p>Line 18 - print(\"Name: \", pupilRecord[x].Name, \"Age: \", pupilRecord[x].Age, \"Reg: \", pupilRecord[x].Reg) This line prints out the name, age, and registration number for each student in the list.</p> <p>Example</p> <pre><code>    Name: Peter Age: 17 Reg: r1\n</code></pre>"},{"location":"SI/12-Arrays-of-Records/#array-of-records-with-files","title":"Array of Records (with Files)","text":""},{"location":"SI/12-Arrays-of-Records/#part-one_2","title":"Part One","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    file = open(\"School-Reg.csv\", \"r\")\n</code></pre> <p>Info</p> <p>Lines 1 - 10 are covered in Working with Records.</p> <p>Line 12 - file = open(\"School-Reg.csv\", \"r\") This line opens a file called \"School-Reg.csv\" in read mode so that we can read from it.</p>"},{"location":"SI/12-Arrays-of-Records/#part-two_2","title":"Part Two","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    file = open(\"School-Reg.csv\", \"r\")\n\n    for i in range(len(pupilRecord)):\n        data = file.readline()\n        data = data.strip(\"\\n\")\n        data = data.split(\",\")\n        pupilRecord[i] = SchoolReg(data[0], int(data[1]), data[2])\n</code></pre> <p>Line 14 A loop that will go through each of the three student records in the pupilRecord list one by one.</p> <p>Line 15 - data = file.readline() This line reads one line of data from the file. Each time the loop runs, it reads the next line from the file.</p> <p>Line 16 - data = data.strip(\"\\n\") This removes the newline character (\\n), which is an invisible character at the end of each line in a file. It's like cleaning up the data so there are no extra spaces or jumps to the next line.</p> <p>Line 17 - data = data.split(\",\") This splits the line of data at each comma. Since it's a CSV file, the data for each student is separated by commas. After splitting, we get a list of pieces of information, like the student's name, age, and registration number.</p> <p>For example, if the line was \"Peter,17,r1\", after splitting it, we would get:</p> <pre><code>``` text\n    data[0] = \"Peter\"\n    data[1] = \"17\"\n    data[2] = \"r1\"\n```\n</code></pre> <p>Line 19 - pupilRecord[i] = SchoolReg(data[0], int(data[1]), data[2]) This line takes the pieces of data from the file and creates a SchoolReg object for each student. It fills in the student's name (data[0]), age (data[1]), and registration number (data[2]). The int() function converts the age from a string to a number.</p>"},{"location":"SI/12-Arrays-of-Records/#part-three_1","title":"Part Three","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n    import CSV\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    file = open(\"School-Reg.csv\", \"r\")\n\n    for i in range(len(pupilRecord)):\n        data = file.readline()\n        data = data.strip(\"\\n\")\n        data = data.split(\",\")\n        pupilRecord[i] = SchoolReg(data[0], int(data[1]), data[2])\n\n    for x in range(len(pupilRecord)):\n        print (\"Name: \" , pupilRecord[x].Name , \"Age: \" , pupilRecord[x].Age , \"Reg: \" , pupilRecord[x].Reg )\n\n    file.close()\n</code></pre> <p>Line 21 - for x in range(len(pupilRecord)): This is another loop. This time, it goes through each student's record in the list and prints out their information.</p> <p>Line 22 - print(\"Name: \", pupilRecord[x].Name, \"Age: \", pupilRecord[x].Age, \"Reg: \", pupilRecord[x].Reg) This line prints out the student's name, age, and registration number. </p> <p>Line 23 - file.close() This line closes the file after we are finished reading from it.</p>"}]}